stages:
  - native
  - cross

variables:
  ARTIFACTS_NAME: "llvm-disas-$CI_PIPELINE_ID-$CI_JOB_NAME"

.before_script_content: &before_script_content |
  apt update
  apt install -y cmake g++$TOOLCHAIN_SUFFIX patch python3 xz-utils

.before_script: &before_script
  before_script:
    - *before_script_content

.cross_before_script: &cross_before_script
  before_script:
    - mv shared host-shared
    - rm -rf static
    - *before_script_content

.build_script: &build_script
  script:
    - set -ex
    # ":" is a no-op in bash
    - if [ "$RUN_CTEST" = "true" ]; then CTEST="ctest -V"; else CTEST=":"; fi
    - mkdir shared
    - cd shared
    - cmake -DCMAKE_BUILD_TYPE=Release $CMAKE_XVARS ..
    - make -j$(nproc) VERBOSE=1
    - $CTEST
    - cd ..
    - mkdir static
    - cd static
    - cmake -DCMAKE_BUILD_TYPE=Release $CMAKE_XVARS -DSTATIC_LLVM_DISAS=ON ..
    - make -j$(nproc) VERBOSE=1
    - $CTEST

.build_artifacts: &build_artifacts
  artifacts:
    name: "$ARTIFACTS_NAME"
    paths:
      - shared/libllvm-disas.*
      - shared/test-app
      - shared/llvm-tblgen # Will not be present in the cross stage
      - static/libllvm-disas.a
      - static/test-app
    when: always

linux-aarch64:
  stage: cross
  image: debian:bullseye
  dependencies:
    - linux-x86_64
  variables:
    CMAKE_XVARS:      "-DCMAKE_TOOLCHAIN_FILE=../.ci/aarch64-toolchain.cmake -DLLVM_TABLEGEN=$CI_PROJECT_DIR/host-shared/llvm-tblgen"
    TOOLCHAIN_SUFFIX: "-aarch64-linux-gnu"
  <<: *cross_before_script
  <<: *build_script
  <<: *build_artifacts

linux-arm:
  stage: cross
  image: debian:bullseye
  dependencies:
    - linux-x86_64
  variables:
    CMAKE_XVARS:      "-DCMAKE_TOOLCHAIN_FILE=../.ci/arm-toolchain.cmake -DLLVM_TABLEGEN=$CI_PROJECT_DIR/host-shared/llvm-tblgen"
    TOOLCHAIN_SUFFIX: "-arm-linux-gnueabihf"
  <<: *cross_before_script
  <<: *build_script
  <<: *build_artifacts

linux-i386:
  stage: native
  image: i386/debian:bullseye
  variables:
    CMAKE_XVARS:      "-DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=i386"
    RUN_CTEST: "true"
  <<: *before_script
  <<: *build_script
  after_script:
    - ldd shared/libllvm-disas.so
  <<: *build_artifacts

linux-x86_64:
  stage: native
  image: debian:bullseye
  variables:
    RUN_CTEST: "true"
  <<: *before_script
  <<: *build_script
  after_script:
    - ldd shared/libllvm-disas.so
  <<: *build_artifacts

macos:
  stage: native
  tags: ["renode-macos"]
  variables:
    RUN_CTEST: "true"
  <<: *build_script
  after_script:
    - otool -L shared/libllvm-disas.dylib
  <<: *build_artifacts

macos-aarch64:
  stage: native
  tags: ["macrunner-arm"]
  variables:
    RUN_CTEST: "true"
  <<: *build_script
  after_script:
    - otool -L shared/libllvm-disas.dylib
  <<: *build_artifacts

windows:
  stage: native
  image: "debian:bookworm"
  variables:
    SCALENODE_CPU: 8
    SCALENODE_RAM: 8000
    SCALENODE_DISK: 50
    QEMU_CPU: 8
    QEMU_RAM: "6G"
    QEMU_DISK: "40G"
  before_script:
    - apt -qqy update > /dev/null
    - apt -qqy install wget git qemu-system-x86 qemu-utils openssh-client > /dev/null
    - mkdir -p ~/.ssh
    - 'echo -e "LogLevel ERROR\n\nHost windows\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile /dev/null\n\tPort 9022\n\tHostName localhost\n\tUser windows\n\n" > ~/.ssh/config'
  script:
    # `run_windows.sh` isn't downloaded to the current (repository) dir to avoid packing and sending it to the Windows guest in the next step.
    - pushd ..
    - wget "$CI_WINDOWS_RUNNER" # run_windows.sh
    - chmod +x run_windows.sh
    - QEMU_ALLOW_INTERNET=1 ./run_windows.sh -b -e -c $QEMU_CPU -m $QEMU_RAM -r $QEMU_DISK
    - popd
    - ssh windows winfetch
    - tar -c . | ssh windows 'tar -x -f -'
    # add /usr/bin to Path as the first element, so we make sure that Posix utilities of the same name as in Windows (e.g. find) are used
    - ssh windows cmd /c 'setx /M path "/bin;/usr/bin;%path%"'
    - ssh windows choco install python3 --version=3.10.8 -y --no-progress
    - ssh windows bash .ci/windows.sh
    - ssh windows ldd shared/libllvm-disas.dll
    - ssh windows 'tar --exclude=shared/llvm-ep-prefix -c -f - shared' | tar -x -m -f -
  artifacts:
    name: "$ARTIFACTS_NAME"
    paths:
      - shared/libllvm-disas.dll
      - shared/test-app.exe
    when: always
