llvm-disassembler
=================

This library is a wrapper for *LLVM* disassembling functions.
It is used to disassembly machine code in `Renode <https://renode.io>`_ (e.g. while logging instructions executed by the emulated device).

Building
--------

The library is prepared to have build files generated by `CMake <https://cmake.org/>`_.
Such build files have been tested to build this project properly on *Linux*, *macOS* and *Windows*.
However, there are a few caveats for building it on *Windows*.

Successful build will result in creating a library and a testing executable.

Linux and macOS
+++++++++++++++

Building this library on *Linux* and *macOS* is quite straightforward.

Building this project on both of these operating systems has been tested using *CMake*'s default *"Unix Makefiles"* generator with *make* and with the most common compiler for each of them â€“ *GCC* on *Linux* and *AppleClang* on *macOS*.

The necessary *LLVM* libraries are extracted after downloading *clang+llvm* installer, if the ``llvm-libs`` directory is not found along source files.

After linking with static LLVM libraries, the result of a build is a single independent shared (dynamic) library named ``libLLVM.so`` on *Linux* and ``libLLVM.dylib`` on *macOS*.

Windows
+++++++

For now, the only fully tested Windows *CMake* generator is *"MinGW Makefiles"*, which is not the default one.
To run *CMake* specifying the generator, run it with the ``-G [GENERATOR]`` flag:

	cmake.exe [PATH_TO_SOURCE] -G "MinGW Makefiles"

and then build it using ``mingw32-make.exe``.
It has to be done in a clean build directory because after the first run and creation of ``CMakeCache.txt``, the generator can't be changed.

LLVM library
^^^^^^^^^^^^

This project requires the ``LLVM-C.dll`` library from the *LLVM* project.
For now, the library from *LLVM v9.0* is the recommended one.

Its parent directory can be specified using the ``-DLLVM-C_USERDIR`` switch.
E.g., if *LLVM* is installed in the default Windows directory, such switch can be used:

	-DLLVM-C_USERDIR="C:/Program Files/LLVM/bin/"

Without it, or when the library can't be found there, *CMake* will try to download *LLVM* installer and extract ``LLVM-C.dll`` from it using *7-Zip*.
That's why it can look for the ``7z.exe`` installed but its path can also be specified using the ``-D7ZIP`` switch:

	-D7ZIP="C:/Users/John Doe/Downloads/7z.exe"

Generating *"MinGW Makefiles"* with *sh.exe* in *PATH* (e.g. with *Cygwin* installed)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unfortunately, the *"MinGW Makefiles"* generator doesn't like it when ``sh.exe`` appears in the *PATH* environment variable.
However, generation of *"MinGW Makefiles"* worked well during testing after suppressing that warning.
So in case of encountering such an error::

        CMake Error at {CMAKE_PATH}/Modules/CMakeMinGWFindMake.cmake:12 (message):
          sh.exe was found in your PATH, here:

          C:/cygwin64/bin/sh.exe

          For MinGW make to work correctly sh.exe must NOT be in your path.

          Run cmake from a shell that does not have sh.exe in your PATH.

          If you want to use a UNIX shell, then use MSYS Makefiles.

        Call Stack (most recent call first):
          CMakeLists.txt:4 (project)


        CMake Error: CMAKE_C_COMPILER not set, after EnableLanguage
        CMake Error: CMAKE_CXX_COMPILER not set, after EnableLanguage
        -- Configuring incomplete, errors occurred!

please try using *CMake* with an additional ``-DCMAKE_SH="CMAKE_SH-NOTFOUND`` switch.
It's only needed for the first run of *CMake*.
