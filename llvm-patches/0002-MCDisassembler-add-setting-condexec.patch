diff --git a/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h b/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
index 901bfcf5f..e30f881e0 100644
--- a/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
+++ b/llvm/include/llvm/MC/MCDisassembler/MCDisassembler.h
@@ -192,6 +192,16 @@ public:
   virtual uint64_t suggestBytesToSkip(ArrayRef<uint8_t> Bytes,
                                       uint64_t Address) const;
 
+  /// Set architecture-specific conditional execution state, for example
+  /// for ARM Thumb IT blocks.
+  /// \param State    - Architecture-specific conditional execution state
+  /// \return         - True if the conditional execution state was set
+  ///                   successfully
+  ///                 - False if setting the conditional execution state
+  ///                   failed (for example, the architecture does not have
+  ///                   conditional execution state)
+  virtual bool setCondexecState(uint64_t State) const;
+
 private:
   MCContext &Ctx;
 
diff --git a/llvm/lib/MC/MCDisassembler/MCDisassembler.cpp b/llvm/lib/MC/MCDisassembler/MCDisassembler.cpp
index 6aa4b0e4f..82e4cea0d 100644
--- a/llvm/lib/MC/MCDisassembler/MCDisassembler.cpp
+++ b/llvm/lib/MC/MCDisassembler/MCDisassembler.cpp
@@ -25,6 +25,10 @@ uint64_t MCDisassembler::suggestBytesToSkip(ArrayRef<uint8_t> Bytes,
   return 1;
 }
 
+bool MCDisassembler::setCondexecState(uint64_t State) const {
+  return false;
+}
+
 bool MCDisassembler::tryAddingSymbolicOperand(MCInst &Inst, int64_t Value,
                                               uint64_t Address, bool IsBranch,
                                               uint64_t Offset, uint64_t OpSize,
diff --git a/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp b/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp
index b4eabc05b..aee0baf3f 100644
--- a/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp
+++ b/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp
@@ -149,6 +149,8 @@ public:
   uint64_t suggestBytesToSkip(ArrayRef<uint8_t> Bytes,
                               uint64_t Address) const override;
 
+  bool setCondexecState(uint64_t State) const override;
+
 private:
   DecodeStatus getARMInstruction(MCInst &Instr, uint64_t &Size,
                                  ArrayRef<uint8_t> Bytes, uint64_t Address,
@@ -772,6 +774,18 @@ uint64_t ARMDisassembler::suggestBytesToSkip(ArrayRef<uint8_t> Bytes,
   return Insn16 < 0xE800 ? 2 : 4;
 }
 
+bool ARMDisassembler::setCondexecState(uint64_t State) const {
+  // Clear out the existing state.
+  while (ITBlock.instrInITBlock())
+    ITBlock.advanceITState();
+
+  if ((State & 0xFF) != 0) {
+    ITBlock.setITState((State >> 4) & 0xF, State & 0xF);
+  }
+
+  return true;
+}
+
 DecodeStatus ARMDisassembler::getInstruction(MCInst &MI, uint64_t &Size,
                                              ArrayRef<uint8_t> Bytes,
                                              uint64_t Address,
